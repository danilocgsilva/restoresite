#!/bin/bash

##
# The command line bootstrap
#
pack_file=""

do_restoresite() {

    check_for_dependencies

    # Loads the function utility for askshell
    source $(which askshell)

    make_questions

    unpack_packfile

    check_for_unziped_files

}

##
# Inquires the user for the basic input
#
make_questions() {
    askshell_file "Please, provides the path for the pack file: " pack_path
    echo Pack file: $pack_path
}

##
# Check for dependencies
#
check_for_dependencies() {

    if ! which askshell > /dev/null 2>&1; then
        can_download=$(check_if_can_download_dependencies)
        if [ $can_download -eq 1 ]; then
            installfromuri https://raw.githubusercontent.com/danilocgsilva/ask_shell/master/programfiles/askshell
            echo askshell utility just installed in the system.
        else
            # Exits the application
            echo Can\'t continue the script. The askshell utility is part of the prerequisites and is not installed in the system.
            echo You can do:
            echo 1. \(Preferaly\) Download the https://raw.githubusercontent.com/danilocgsilva/install_from_uri/master/programfiles/installfromuri, put in the /usr/local/bin and assign execution permission. So you can solve the current dependency and all other eventually will exists from some another author utility.
            echo 2. Download the https://raw.githubusercontent.com/danilocgsilva/ask_shell/master/programfiles/askshell, put in the /usr/local/bin and assign execution permission.
            exit
        fi
    fi

}

##
# Checks if can download dependencies
# 
# @return
#   1 if can. 0 if can't.
#
check_if_can_download_dependencies() {
    if which installfromuri > /dev/null 2>&1; then
        echo 1
    else
        echo 0
    fi
}

##
# Checks for the first parameter
#
check_first_parameter() {

    if [ -z "$1" ]; then
        echo You need provides the first parameter to be the pack source.
        exit
    fi

    if [ ! -f "$1" ]; then
        echo The parameter provided seems to be not any file. It must be the pack source.
        exit
    fi

}

##
# Unpack the parameter provided
#
unpack_packfile() {
    date=$(date +%Y%m%d%H%M%S)
    tmp_dir=/tmp/restoresite_tmp_$date
    mkdir $tmp_dir
    echo \$path_path is: "$path_path"
    tar xvzf "$path_path" -C $tmp_dir
}

##
# Check for validity from the unziped contents
#
check_for_unziped_files() {
    ls $tmp_dir
    entry_count=$(ls $tmp_dir | wc -l)

    if [ $entry_count -ne 1 ]; then
        echo There\'s something wrong from the unziped pack: more entries allowed in the unziped folder. Only one entry allowed in the root resulting unziped pack.
        echo Cleaning...
        rm -rf $tmp_dir
        exit
    fi

}

##
# The main execution
#
do_restoresite "$1"